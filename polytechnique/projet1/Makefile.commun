MCU=atmega324pa


# Programmer ID - Ne pas changer 
# Liste complete des IDs disponible avec avrdude
AVRDUDE_PROGRAMMERID=usbasp



####################################################
#####         Configuration terminee           #####
#####                                          #####
#####  Le reste de cette section contient les  #####
##### details d'implementation vous permettant #####
##### de mieux comprendre le fonctionnement de ##### 
#####   ce Makefile en vue de sa modification  #####
####################################################



####### variables #######

#compilateur utilise
CC=avr-gcc
#pour copier le contenu d'un fichier objet vers un autre
OBJCOPY=avr-objcopy
#pour permettre le transfert vers le microcontroleur
AVRDUDE=avrdude
#pour supprimer les fichiers lorsque l'on appel make clean
REMOVE=rm -f
# HEXFORMAT -- format pour les fichiers produient .hex
HEXFORMAT=ihex



####### Options de compilation #######

# Flags pour le compilateur en C
CFLAGS=-I. -MMD $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-fshort-enums             \
	-funsigned-bitfields -funsigned-char    \
	-Wall                                        

# Flags pour le compilateur en C++
CXXFLAGS=-fno-exceptions     

# Linker pour lier les librairies utilisees
LDFLAGS=-Wl,-Map,$(BINDIR)/$(TRG).map -mmcu=$(MCU)



####### Definition de tout les fichiers objets #######

# Cette fonction permet de differencier les fichiers .c
# des fichiers .cpp
# Fichier C
CFILES=$(filter %.c, $(PRJSRC))
# Fichier C++
CPPFILES=$(filter %.cpp, $(PRJSRC))

# .o files directory
OBJDIR = obj
# bin directory
BINDIR = bin


####### Cible (Target) #######

#Nom des cibles par defaut
HEXROMTRG=$(BINDIR)/$(PROJECTNAME).hex
HEXTRG=$(HEXROMTRG) $(BINDIR)/$(PROJECTNAME).ee.hex

# Liste de tout les fichiers objet que nous devons creer
OBJDEPS=$(patsubst %.c,$(OBJDIR)/%.o,$(CFILES)) \
	$(patsubst %.cpp,$(OBJDIR)/%.o,$(CPPFILES))
	
# Pour plus d'information sur cette section, consulter :
# http://bit.ly/257R53E	
# Les fonctions $(filter patternâ€¦,text) &
# $(patsubst pattern,replacement,text) sont pertinentes


####### Creation des commandes du Makefile ####### 

# Creation des cibles Phony (Phony Target)
# En plus de la commande make qui permet de compiler
# votre projet, vous pouvez utilisez les commandes
# make all, make install et make clean
.PHONY: all install clean test library

# Make all permet simplement de compiler le projet
#
all: $(TRG)


# Production des fichiers object
# De C a objet
$(OBJDIR)/%.o: %.c $(OBJDIR) library
	$(CC) $(CFLAGS) -c $< -o $@
# De C++ a objet
$(OBJDIR)/%.o: %.cpp $(OBJDIR) library
	$(CC) $(CFLAGS) $(CXXFLAGS) -c $< -o $@
# Verification des dependances (header dependencies)
-include *.d

# Production des fichiers hex a partir des fichiers elf
$(BINDIR)/%.hex: %.out $(BINDIR)
	$(OBJCOPY) -j .text -j .data \
		-O $(HEXFORMAT) $< $@

### Pour voir la valeur des variables
test:
	echo $(HEXROMTRG)

########## directory rules ##########

$(OBJDIR):
	mkdir $(OBJDIR)
$(BINDIR):
	mkdir $(BINDIR)

# Make install permet de compiler le projet puis
# d'ecrire le programme en memoire flash dans votre
# microcontroleur. Celui-ci doit etre branche par cable USB
install: $(HEXROMTRG)			
	$(AVRDUDE) -c $(AVRDUDE_PROGRAMMERID)   \
	-p $(MCU) -P -e -U flash:w:$(HEXROMTRG)

# Make clean permet d'effacer tout les fichiers generes
# lors de la compilation
clean:
	$(REMOVE) $(TRG)
	$(REMOVE) -rf $(BINDIR)
	$(REMOVE) -rf $(OBJDIR)


# Pour plus d'information sur les phony target, consulter:
# http://bit.ly/1WBQe61

# De plus, pour mieux comprendre les makefiles et 
# leur fonctionnement, consulter la documentation de GNU Make:
# http://bit.ly/23Vpk8s

# Finalement, ce tutoriel en ligne constitut une bonne 
# introduction au Makefile:
# http://bit.ly/1XvxsN3

#####                    EOF                   #####
